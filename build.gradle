buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

group = 'com.github.decamp'
buildDir = "$projectDir/build"
version = '0.0.5'
ext.versionCode = 5

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'


android {
    compileSdkVersion 19
    buildToolsVersion '23.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        versionCode versionCode
        versionName version
        minSdkVersion 19
        targetSdkVersion 23

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    dependencies {
        androidTestCompile 'junit:junit:4.12'
        androidTestCompile 'com.android.support.test:rules:0.5'
        androidTestCompile 'com.android.support.test:runner:0.5'
        androidTestCompile 'org.mockito:mockito-core:1.10.19'
        androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

        compile 'com.github.decamp:vec:0.0.2'
        compile 'com.github.decamp.util:util-common:v0.0.3'
        compile 'com.github.decamp.util:util-android:v0.0.3'
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}


task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files( android.getBootClasspath().join(File.pathSeparator) )
    classpath += configurations.compile
}


task javadocJar( type: Jar, dependsOn: javadoc ) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
//    archives javadocJar
}


task printDeps << {
    println "Dependencies:"
    configurations.runtime.each { println it }
}
